version: '3.8'

services:
  # Redis - Cache and Message Broker
  redis:
    image: redis:7-alpine
    container_name: hwp_api_redis_dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - hwp_dev_network

  # PostgreSQL Database (Optional - for testing with real DB)
  postgres:
    image: postgres:15-alpine
    container_name: hwp_api_postgres_dev
    environment:
      POSTGRES_USER: hwp_dev
      POSTGRES_PASSWORD: devpass123
      POSTGRES_DB: hwp_api_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hwp_dev"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - hwp_dev_network

  # Main API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hwp_api_dev
    environment:
      # Database
      DATABASE_URL: postgresql://hwp_dev:devpass123@postgres:5432/hwp_api_dev
      # Redis
      REDIS_URL: redis://redis:6379/0
      # App Settings
      SECRET_KEY: dev-secret-key-change-in-production
      ENVIRONMENT: development
      DEBUG: "true"
      LOG_LEVEL: DEBUG
      # CORS - Allow all origins in dev
      CORS_ORIGINS: "*"
      # File Processing
      MAX_UPLOAD_SIZE: 104857600  # 100MB
      PROCESS_TIMEOUT: 300
      # Cache
      CACHE_ENABLED: "true"
      CACHE_TTL: 3600
      # Rate Limiting (relaxed for development)
      RATE_LIMIT_ENABLED: "false"
    volumes:
      - ./app:/app/app  # Hot reload
      - ./tests:/app/tests  # Tests
      - ./uploads:/app/uploads  # File uploads
      - ./temp:/app/temp  # Temporary files
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
      "
    networks:
      - hwp_dev_network

  # Celery Worker (Optional - for async processing)
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hwp_api_celery_dev
    environment:
      DATABASE_URL: postgresql://hwp_dev:devpass123@postgres:5432/hwp_api_dev
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: dev-secret-key-change-in-production
      ENVIRONMENT: development
      LOG_LEVEL: DEBUG
    volumes:
      - ./app:/app/app
      - ./uploads:/app/uploads
      - ./temp:/app/temp
    depends_on:
      - redis
      - postgres
    command: celery -A app.core.celery_app worker --loglevel=debug -Q default,extraction,heavy,priority
    networks:
      - hwp_dev_network

  # Flower - Celery Monitoring (Optional)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hwp_api_flower_dev
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      FLOWER_PORT: 5555
    ports:
      - "5555:5555"
    depends_on:
      - redis
    command: celery -A app.core.celery_app flower --port=5555
    networks:
      - hwp_dev_network

  # Adminer - Database Management (Optional)
  adminer:
    image: adminer
    container_name: hwp_api_adminer_dev
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - hwp_dev_network

volumes:
  redis_dev_data:
  postgres_dev_data:

networks:
  hwp_dev_network:
    driver: bridge