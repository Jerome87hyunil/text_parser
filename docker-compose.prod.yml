version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hwp_api_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-hwp_api}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_DB: ${POSTGRES_DB:-hwp_api}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-hwp_api}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hwp_network

  # Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: hwp_api_redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hwp_network

  # Main API Application
  api:
    build:
      context: .
      dockerfile: Dockerfile.prod
      args:
        PYTHON_VERSION: 3.11
    container_name: hwp_api_app
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-hwp_api}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-hwp_api}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      WORKERS: ${WORKERS:-4}
      MAX_UPLOAD_SIZE: ${MAX_UPLOAD_SIZE:-104857600}
      CACHE_ENABLED: ${CACHE_ENABLED:-true}
      CACHE_TTL: ${CACHE_TTL:-3600}
      CORS_ORIGINS: ${CORS_ORIGINS:-*}
    volumes:
      - ./app:/app/app:ro
      - uploads:/app/uploads
      - temp:/app/temp
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: >
      sh -c "
        alembic upgrade head &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --workers ${WORKERS:-4} --loop uvloop
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hwp_network

  # Celery Worker for Async Tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: hwp_api_celery_worker
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-hwp_api}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-hwp_api}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      CELERY_AUTOSCALE: ${CELERY_AUTOSCALE:-true}
      CELERY_AUTOSCALE_MAX: ${CELERY_AUTOSCALE_MAX:-8}
      CELERY_AUTOSCALE_MIN: ${CELERY_AUTOSCALE_MIN:-2}
    volumes:
      - ./app:/app/app:ro
      - uploads:/app/uploads
      - temp:/app/temp
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    command: celery -A app.core.celery_app worker --loglevel=${LOG_LEVEL:-info} --autoscale=${CELERY_AUTOSCALE_MAX:-8},${CELERY_AUTOSCALE_MIN:-2} -Q default,extraction,heavy,priority
    networks:
      - hwp_network

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: hwp_api_celery_beat
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-hwp_api}:${POSTGRES_PASSWORD:-changeme}@postgres:5432/${POSTGRES_DB:-hwp_api}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENVIRONMENT: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    volumes:
      - ./app:/app/app:ro
    depends_on:
      - redis
      - postgres
    restart: unless-stopped
    command: celery -A app.core.celery_app beat --loglevel=${LOG_LEVEL:-info}
    networks:
      - hwp_network

  # Flower for Celery Monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: hwp_api_flower
    environment:
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      FLOWER_PORT: 5555
      FLOWER_BASIC_AUTH: ${FLOWER_USER:-admin}:${FLOWER_PASSWORD:-changeme}
    ports:
      - "5555:5555"
    depends_on:
      - redis
    restart: unless-stopped
    command: celery -A app.core.celery_app flower --port=5555
    networks:
      - hwp_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: hwp_api_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
      - static:/usr/share/nginx/html/static:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - hwp_network

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: hwp_api_prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - hwp_network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: hwp_api_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-changeme}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - hwp_network

volumes:
  postgres_data:
  redis_data:
  uploads:
  temp:
  nginx_logs:
  static:
  prometheus_data:
  grafana_data:

networks:
  hwp_network:
    driver: bridge